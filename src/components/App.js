import { userContex } from "../contexts/CurrentUserContext";

import React from "react";
import api from "../utils/Api";

import Header from "./Header";
import Main from "./Main";
import Footer from "./Footer";
import ImagePopup from "./ImagePopup";

import EditAvatarPopup from "./EditAvatarPopup";
import EditProfilePopup from "./EditProfilePopup";
import AddPlacePopup from "./AddPlacePopup";
import –°onfirmationRemovePopup from "./–°onfirmationRemovePopup";

import Spinner from "./Spinner";


function App() {
  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] =
    React.useState(false);
  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);
  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] =
    React.useState(false);
  const [is–°onfirmationPopupOpen, setIs–°onfirmationPopupOpen] =
    React.useState(false);
  const [selectedCard, setSelectedCard] = React.useState(null);
  const [currentUser, setCurrentUser] = React.useState(null);
  const [cards, setCards] = React.useState([]);
  const [card, setCard] = React.useState({});
  const [loading, setLoading] = React.useState(false);
  const [loadingText, setLoadingText] = React.useState("");
  const [btnFormText, setBtnFormText] = React.useState(`–°–æ—Ö—Ä–∞–Ω–∏—Ç—å`);

  React.useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
    spinnerInfo(true, `–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç...üòä`);

    Promise.all([api.getInitialCards(), api.getInitialUsers()])
      .then(([dataCards, dataUser]) => {
        // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å–∞–π—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
        setCards(dataCards.map((card) => card));
        // –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setCurrentUser(dataUser);

        spinnerInfo(false);
        setLoadingText(`–°–æ—Ö—Ä–∞–Ω–∏—Ç—å`);
      })

      .catch((err) => {
        setLoadingText(`–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å... üò¢ ${err}`);
        console.log(err); // –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
      });
  }, []);

  function handleCardLike(card) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∞–π–∫ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    const checkLike = card.likes.some((i) => i._id === currentUser._id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    api
      .changeLikeCardStatus(card._id, !checkLike)
      .then((newCard) => {
        setCards((cards) =>
          cards.map((arrCard) => (arrCard._id === card._id ? newCard : arrCard))
        );
      })
      .catch((err) => {
        console.log(err); // –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
      });
  }

  function handleCardDelete(card) {
    setBtnFormText(`–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...üò¢`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    api
      .deleteCard(card._id)
      .then(() => {
        setCards(cards.filter((arrCards) => arrCards._id !== card._id));
        closeAllPopups();
      })
      .catch((err) => {
        setBtnFormText(`${err}`);
        setTimeout(() => {
          setBtnFormText(`–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É üîÑÔ∏è`);
        }, 1000);
        console.log(err); // –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
      });
  }

  const handleEditAvatarClick = () => {
    setBtnFormText(`–°–æ—Ö—Ä–∞–Ω–∏—Ç—å`);
    setIsEditAvatarPopupOpen(true);
  };

  const handleEditProfileClick = () => {
    setBtnFormText(`–°–æ—Ö—Ä–∞–Ω–∏—Ç—å`);
    setIsEditProfilePopupOpen(true);
  };

  const handleAddPlaceClick = () => {
    setBtnFormText(`–°–æ—Ö—Ä–∞–Ω–∏—Ç—å`);
    setIsAddPlacePopupOpen(true);
  };

  const handle–°onfirmationClick = (card) => {
    setBtnFormText(`–î–∞`);
    setIs–°onfirmationPopupOpen(true);
    setCard(card);
  };

  const handleCardClick = (card) => {
    setSelectedCard(card);
  };

  const spinnerInfo = (boolew, text) => {
    setLoading(boolew);
    setLoadingText(text);
  };

  const handleUpdateUser = (dataUser) => {
    setBtnFormText(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä—É—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ...üòé`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api
      .setInitialUsers(dataUser.name, dataUser.about)
      .then((userData) => {
        setCurrentUser(userData);
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        closeAllPopups();
      })
      .catch((err) => {
        setBtnFormText(`${err}`);
        setTimeout(() => {
          setBtnFormText(`–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É üîÑÔ∏è`);
        }, 1000);
        console.log(err); // –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
      });
  };

  const handleUpdateAvatar = (dataAvatar) => {
    setBtnFormText(`–û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É... üñºÔ∏è`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api
      .setNewAvatar(dataAvatar.avatar)
      .then((newUserAvatar) => {
        setCurrentUser(newUserAvatar);
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        closeAllPopups();
      })
      .catch((err) => {
        setBtnFormText(`${err}`);
        setTimeout(() => {
          setBtnFormText(`–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É üîÑÔ∏è`);
        }, 1000);
        console.log(err); // –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
      });
  };

  const handleAddPlaceSubmit = (dataNewCard) => {
    setBtnFormText(`–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É... ü§©`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
    api
      .setAddNewCard(dataNewCard.title, dataNewCard.link)
      .then((arrNewCard) => {
        setCards([arrNewCard, ...cards]);
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        closeAllPopups();
      })
      .catch((err) => {
        setBtnFormText(`${err}`);
        setTimeout(() => {
          setBtnFormText(`–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É üîÑÔ∏è`);
        }, 1000);
        console.log(err); // –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
      });
  };

  const closeAllPopups = () => {
    setIsEditProfilePopupOpen(false);
    setIsAddPlacePopupOpen(false);
    setIsEditAvatarPopupOpen(false);
    setIs–°onfirmationPopupOpen(false);
    setSelectedCard(false);
  };

  return (
    <>
      {loading ? (
        <Spinner loading={loading} spinnerText={loadingText} />
      ) : (
        <userContex.Provider value={currentUser}>
          <Header />
          <Main
            arrCards={cards}
            onEditProfile={handleEditProfileClick}
            onAddPlace={handleAddPlaceClick}
            onEditAvatar={handleEditAvatarClick}
            onCardClick={handleCardClick}
            onCardLike={handleCardLike}
            on–°onfirmationRemove={handle–°onfirmationClick}
          />

          <ImagePopup card={selectedCard} onClose={closeAllPopups} />
          <EditAvatarPopup
            isOpen={isEditAvatarPopupOpen}
            btnText={btnFormText}
            onUpdateAvatar={handleUpdateAvatar}
            onClose={closeAllPopups}
          />
          <EditProfilePopup
            isOpenEditProfile={isEditProfilePopupOpen}
            btnText={btnFormText}
            onUpdateUser={handleUpdateUser}
            onClose={closeAllPopups}
          />
          <AddPlacePopup
            isOpenAddPlace={isAddPlacePopupOpen}
            btnText={btnFormText}
            onAddPlace={handleAddPlaceSubmit}
            onClose={closeAllPopups}
          />
          <–°onfirmationRemovePopup
            isOpen–°onfirmation={is–°onfirmationPopupOpen}
            btnText={btnFormText}
            onCardDelete={handleCardDelete}
            card={card}
            on–°onfirmationRemove={handle–°onfirmationClick}
            onClose={closeAllPopups}
          />
          <Footer />
        </userContex.Provider>
      )}
    </>
  );
}

export default App;
